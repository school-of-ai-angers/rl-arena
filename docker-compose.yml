version: "3"
services:
  #
  # Dev utilities
  #
  make_migrations:
    # Dev command used to create the necessary database migrations
    image: rl-arena
    environment:
      - POSTGRES_PASSWORD
      - DJANGO_SECRET_KEY
      - POSTGRES_HOST=db
      - POSTGRES_NAME=postgres
      - POSTGRES_USER=postgres
      - DJANGO_SETTINGS_MODULE=core.settings
      - DEBUG=1
    volumes:
      - ./core/migrations:/app/core/migrations
    command: [manage.py, makemigrations]
  migrate:
    # Command used to apply the migrations to the database
    image: rl-arena
    environment:
      - POSTGRES_PASSWORD
      - SUPERUSER_USERNAME
      - SUPERUSER_EMAIL
      - SUPERUSER_PASSWORD
      - DJANGO_SECRET_KEY
      - POSTGRES_HOST=db
      - POSTGRES_NAME=postgres
      - POSTGRES_USER=postgres
      - DJANGO_SETTINGS_MODULE=core.settings
      - DEBUG=1
    command: [manage.py, migrate]
  web-dev:
    # Web service in dev mode
    image: rl-arena
    restart: always
    environment:
      - POSTGRES_PASSWORD
      - DJANGO_SECRET_KEY
      - INVITATION_CODE
      - TEAMS
      - POSTGRES_HOST=db
      - POSTGRES_NAME=postgres
      - POSTGRES_USER=postgres
      - DJANGO_SETTINGS_MODULE=web.settings
      - DEBUG=1
    ports:
      - 8000:8000
    volumes:
      - ./data/media:/app/data/media
      # Application code
      - ./core:/app/core:ro
      - ./environments:/app/environments:ro
      - ./web:/app/web:ro
    command: [manage.py, runserver, "0.0.0.0:8000"]
  collectstatic:
    # Collect static files for prod serving
    image: rl-arena
    environment:
      - POSTGRES_PASSWORD
      - DJANGO_SECRET_KEY
      - INVITATION_CODE
      - TEAMS
      - POSTGRES_HOST=db
      - POSTGRES_NAME=postgres
      - POSTGRES_USER=postgres
      - DJANGO_SETTINGS_MODULE=web.settings
      - DEBUG=1
    volumes:
      - ./data/static:/app/data/static
    command: [manage.py, collectstatic, --clear, --noinput]
  #
  # Main services
  #
  db:
    # The Postgres database
    image: postgres:12
    restart: always
    environment:
      - POSTGRES_PASSWORD
    volumes:
      - ./data/${POSTGRES_DIR:-db}:/var/lib/postgresql/data
  web:
    # Web service in prod mode
    image: rl-arena
    restart: always
    environment:
      - POSTGRES_PASSWORD
      - DJANGO_SECRET_KEY
      - INVITATION_CODE
      - TEAMS
      - ALLOWED_HOSTS
      - POSTGRES_HOST=db
      - POSTGRES_NAME=postgres
      - POSTGRES_USER=postgres
      - DJANGO_SETTINGS_MODULE=web.settings
      - DEBUG=0
    volumes:
      - ./data/media:/app/data/media
    entrypoint: [gunicorn, -b, "0.0.0.0:8000", web.wsgi]
  builder:
    # Worker service that builds Docker images for the submissions
    image: rl-arena
    restart: always
    environment:
      - POSTGRES_PASSWORD
      - DJANGO_SECRET_KEY
      - POSTGRES_HOST=db
      - POSTGRES_NAME=postgres
      - POSTGRES_USER=postgres
      - DJANGO_SETTINGS_MODULE=builder.settings
      - LOG_LEVEL=INFO
      - DEBUG=0
    volumes:
      - ./data/media:/app/data/media
      # Allows to run docker from inside the container
      - /var/run/docker.sock:/var/run/docker.sock
    command: [-m, builder.main]
  publisher:
    # Worker service that publish to GitHub the public competitors
    image: rl-arena
    restart: always
    environment:
      - POSTGRES_PASSWORD
      - DJANGO_SECRET_KEY
      - PUBLISHER_REMOTE
      - PUBLISHER_WEB_URL
      - POSTGRES_HOST=db
      - POSTGRES_NAME=postgres
      - POSTGRES_USER=postgres
      - DJANGO_SETTINGS_MODULE=publisher.settings
      - LOG_LEVEL=INFO
      - GIT_SSH_COMMAND=ssh -i /app/data/publish_keys/id_rsa
      - DEBUG=0
    volumes:
      - ./data/media:/app/data/media
      - ./data/publish_repo:/app/data/publish_repo
      - ./data/publish_keys:/app/data/publish_keys:ro
    command: [-m, publisher.main]
  smoke_tester:
    # Worker service that test recently-built Docker images for the submissions
    image: rl-arena
    restart: always
    environment:
      - POSTGRES_PASSWORD
      - DJANGO_SECRET_KEY
      - HOST_CWD
      - POSTGRES_HOST=db
      - POSTGRES_NAME=postgres
      - POSTGRES_USER=postgres
      - DJANGO_SETTINGS_MODULE=smoke_tester.settings
      - LOG_LEVEL=INFO
      - DEBUG=0
    volumes:
      - ./data/media:/app/data/media
      # Allows to run docker from inside the container
      - /var/run/docker.sock:/var/run/docker.sock
    command: [-m, smoke_tester.main]
  tournament_manager:
    # Worker service that starts and keep track of tournaments
    image: rl-arena
    restart: always
    environment:
      - POSTGRES_PASSWORD
      - DJANGO_SECRET_KEY
      - POSTGRES_HOST=db
      - POSTGRES_NAME=postgres
      - POSTGRES_USER=postgres
      - DJANGO_SETTINGS_MODULE=tournament_manager.settings
      - LOG_LEVEL=INFO
      - DEBUG=0
    command: [-m, tournament_manager.main]
  duel_runner:
    # Worker service that executes duels
    image: rl-arena
    restart: always
    environment:
      - POSTGRES_PASSWORD
      - DJANGO_SECRET_KEY
      - HOST_CWD
      - POSTGRES_HOST=db
      - POSTGRES_NAME=postgres
      - POSTGRES_USER=postgres
      - DJANGO_SETTINGS_MODULE=duel_runner.settings
      - LOG_LEVEL=INFO
      - DEBUG=0
    volumes:
      - ./data/media:/app/data/media
      # Allows to run docker from inside the container
      - /var/run/docker.sock:/var/run/docker.sock
    command: [-m, duel_runner.main]
  nginx:
    # Nginx proxy
    image: nginx:1.17
    restart: always
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./data/static:/app/data/static:ro
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./data/letsencrypt:/etc/letsencrypt
