version: "3"
services:
  db:
    # The Postgres database
    image: postgres:12
    restart: always
    environment:
      - POSTGRES_PASSWORD
    volumes:
      - ./data/${POSTGRES_DIR:-db}:/var/lib/postgresql/data
  make_migrations:
    # Dev command used to create the necessary database migrations
    image: rl-arena
    environment:
      - POSTGRES_PASSWORD
      - DJANGO_SECRET_KEY
      - POSTGRES_HOST=db
      - POSTGRES_NAME=postgres
      - POSTGRES_USER=postgres
      - DJANGO_SETTINGS_MODULE=core.settings
    volumes:
      - ./core/migrations:/app/core/migrations
    command: [python manage.py makemigrations]
  migrate:
    # Command used to apply the migrations to the database
    image: rl-arena
    environment:
      - POSTGRES_PASSWORD
      - SUPERUSER_USERNAME
      - SUPERUSER_EMAIL
      - SUPERUSER_PASSWORD
      - DJANGO_SECRET_KEY
      - POSTGRES_HOST=db
      - POSTGRES_NAME=postgres
      - POSTGRES_USER=postgres
      - DJANGO_SETTINGS_MODULE=core.settings
    command: [python manage.py migrate]
  web:
    # Web service
    image: rl-arena
    restart: always
    environment:
      - POSTGRES_PASSWORD
      - DJANGO_SECRET_KEY
      - POSTGRES_HOST=db
      - POSTGRES_NAME=postgres
      - POSTGRES_USER=postgres
      - DJANGO_SETTINGS_MODULE=web.settings
    ports:
      - 8000:8000
    volumes:
      - ./data/media:/app/data/media
  builder:
    # Worker service that builds Docker images for the submissions
    image: rl-arena
    restart: always
    environment:
      - POSTGRES_PASSWORD
      - DJANGO_SECRET_KEY
      - POSTGRES_HOST=db
      - POSTGRES_NAME=postgres
      - POSTGRES_USER=postgres
      - DJANGO_SETTINGS_MODULE=builder.settings
    volumes:
      - ./data/media:/app/data/media
      # Allows to run docker from inside the container
      - /var/run/docker.sock:/var/run/docker.sock
    command: [python -m builder.main]
